// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  displayName     String
  phoneNumber     String?
  emailVerified   Boolean          @default(false)
  disabled        Boolean          @default(true)
  avator          Attachment?      @relation(fields: [avatorId], references: [id])
  avatorId        String?
  role            Role             @default(USER)
  state           State            @default(PENDING)
  businessProfile BusinessProfile?
  services        Service[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  device          Device?
  orders          Order[]
  reviews         Review[]         @relation("reviewerToReview")
  reviewed        Review[]         @relation("revieweeToReview")
  comments        Comment[]
  location        Location?         @relation(fields: [locationId], references: [id])
  locationId      String?
}

enum BusinnessMode {
  OFFICE_MODE
  MOBILE_MODE
}

model BusinessProfile {
  id        String        @id @default(cuid())
  owner     User          @relation(fields: [ownerId], references: [id])
  ownerId   String
  mode      BusinnessMode  @default(OFFICE_MODE)
  cover     Attachment    @relation(fields: [coverId], references: [id])
  coverId   String
  about     String
  // location   Location      @relation(fields: [locationId], references: [id])
  // locationId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

}

model Device {
  id     String  @id
  fcm_id String?
  type   String  @default("ANDROID")
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Attachment {
  id               String            @id @default(cuid())
  path             String
  filename         String?
  mimetype         String?
  encoding         String?
  duration         Int               @default(0)
  size             Int               @default(0)
  attachmentType   AttachmentType    @default(IMAGE)
  downloadable     Boolean           @default(false)
  placement        String            @default("default")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User[]
  comment          Comment?          @relation(fields: [commentId], references: [id])
  commentId        String?
  paymentMethods   PaymentMethod[]
  services         Service[]
  orders           Order[]
  businessProfiles BusinessProfile[]
  helpStep         HelpStep?         @relation(fields: [helpStepId], references: [id])
  helpStepId       String?
}

model Location {
  id        String                    @id @default(cuid())
  name      String                    @default("unknown")
  geom      Unsupported("geography")?
  lat       Float
  lon       Float
  state     State                     @default(PENDING)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  // business  BusinessProfile[]
  users     User[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
  ORGANIZATION
}

enum State {
  PENDING
  REVIEW
  REJECTED
  APPROVED
  COMPLETED
  ARCHIVED
}

enum AttachmentType {
  AUDIO
  VIDEO
  DOCUMENT
  IMAGE
}

// review part
model Review {
  id         String    @id @default(cuid())
  author     User      @relation("reviewerToReview", fields: [authorId], references: [id])
  authorId   String
  reviewee   User      @relation("revieweeToReview", fields: [revieweeId], references: [id])
  revieweeId String
  value      Int       @default(0)
  content    String?
  state      State     @default(PENDING)
  comments   Comment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id              String       @id @default(cuid())
  author          User         @relation(fields: [authorId], references: [id])
  authorId        String
  review          Review?      @relation(fields: [reviewId], references: [id])
  reviewId        String
  attachments     Attachment[]
  comments        Comment[]    @relation("CommentToComment")
  commentsEnabled Boolean      @default(false)
  content         String
  state           State        @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  comment         Comment?     @relation("CommentToComment", fields: [commentId], references: [id])
  commentId       String?
}

//casbin table

model CasbinRule {
  id        Int      @id @default(autoincrement())
  ptype     String
  v0        String?
  v1        String?
  v2        String?
  v3        String?
  v4        String?
  v5        String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("casbin_rule")
}

//help table

model Help {
  id          String     @id @default(cuid())
  topic       String
  description String?
  steps       HelpStep[]
  state       State      @default(PENDING)
  audience    Role       @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model HelpStep {
  id          String       @id @default(cuid())
  stepNumber  Int
  title       String
  description String?
  state       State        @default(PENDING)
  attachments Attachment[]
  help        Help         @relation(fields: [helpId], references: [id])
  helpId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// payment and subscription

model Service {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  currency    String     @default("TZS")
  state       State      @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  imageId     String?
  image       Attachment? @relation(fields: [imageId], references: [id])
  orders      Order[]
}

model Order {
  id           String        @id @default(cuid())
  quantity     Int
  state        State         @default(PENDING)
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  serviceId    String
  ownerId      String
  receiptId    String?
  owner        User          @relation(fields: [ownerId], references: [id])
  receipt      Attachment?   @relation(fields: [receiptId], references: [id])
  service      Service       @relation(fields: [serviceId], references: [id])
  transactions Transaction[]
}

model PaymentMethod {
  id           String            @id @default(cuid())
  name         String
  description  String?
  logo         Attachment        @relation(fields: [attachmentId], references: [id])
  attachmentId String
  code         SelcomUtilityCode
  transactions Transaction[]
  state        State             @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Transaction {
  id                   String              @id @default(cuid())
  paymentMethod        PaymentMethod       @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId      String
  type                 TransactionType
  // initiator            User                @relation(fields: [userId], references: [id])
  // userId               String
  order                Order               @relation(fields: [orderId], references: [id])
  orderId              String
  mpesaPayment         MpesaPayment?       @relation(fields: [mpesaPaymentId], references: [id])
  mpesaPaymentId       String?
  selcomPayment        SelcomPayment?      @relation(fields: [selcomPaymentId], references: [id])
  selcomPaymentId      String?
  selcomDisbursement   SelcomDisbursement? @relation(fields: [selcomDisbursementId], references: [id])
  selcomDisbursementId String?
  state                State               @default(PENDING)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model MpesaPayment {
  id                              String       @id @default(cuid())
  input_Amount                    String
  input_Country                   String       @default("TZN")
  input_Currency                  String       @default("TZS")
  input_CustomerMSISDN            String
  input_ServiceProviderCode       String
  input_ThirdPartyConversationID  String
  input_TransactionReference      String
  input_PurchasedItemsDesc        String
  output_ConversationID           String?
  output_ResponseCode             String?
  output_ResponseDesc             String?
  output_ThirdPartyConversationID String?
  output_TransactionID            String?
  transaction                     Transaction?
  state                           State        @default(PENDING)
  createdAt                       DateTime     @default(now())
  updatedAt                       DateTime     @updatedAt
}

model SelcomDisbursement {
  id          String              @id @default(cuid())
  amount      Int
  reference   String?
  resultCode  String?
  status      SelcomPaymentStatus @default(PENDING)
  transId     String
  userId      Int
  utilitycode SelcomUtilityCode
  utilityref  String
  validation  SelcomPaymentStatus @default(PENDING)
  transaction Transaction?
  state       State               @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model SelcomPayment {
  id          String              @id @default(cuid())
  transId     String
  amount      Int
  msisdn      String
  operator    String?
  reference   String?
  resultCode  String?
  status      SelcomPaymentStatus @default(PENDING)
  utilityref  Int
  validation  SelcomPaymentStatus @default(PENDING)
  transaction Transaction?
  state       State               @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum TransactionType {
  PAYMENT
  DISBURSEMENT
}

enum SelcomUtilityCode {
  VMCASHIN
  AMCASHIN
  TPCASHIN
  EZCASHIN
  SPCASHIN
  HPCASHIN
  TTCASHIN
}

enum SelcomPaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
