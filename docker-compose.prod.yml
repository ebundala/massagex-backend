version: "3.9"

services:
  db:
    image: ${POSTGRES_TAG}
    
    volumes:
      - PGDATA:/var/lib/postgresql/data
    networks:
      webnet:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
    deploy:
      replicas: 1
      resources:
        limits:
          # cpus: 0.3
          memory: 1g
      restart_policy:
        condition: on-failure
  studio:
    image: ghcr.io/ebundala/massagex-backend/studio:master 
          
    networks:
      webnet:
    environment:
      DATABASE_URL: ${DATABASE_URL}
    deploy:
      replicas: 1
      resources:
        limits:  
          # cpus: 0.05       
          memory: 250m
      restart_policy:
        condition: on-failure
  app:
    image: ghcr.io/ebundala/massagex-backend/server:master       
    environment:
     # google credentials
       GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
       FIREBASE_API_KEY: ${FIREBASE_API_KEY}
       STORAGE_BUCKET: ${STORAGE_BUCKET}
       FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}

      #sendgrid email
       SENDGRID_API_KEY: ${SENDGRID_API_KEY}
       SENDGRID_SENDER_EMAIL: ${SENDGRID_SENDER_EMAIL}
       SENDGRID_ACCOUNT_ACTIVATION_TEMPLATE: ${SENDGRID_ACCOUNT_ACTIVATION_TEMPLATE}
       SENDGRID_ACCOUNT_DEACTIVATION_TEMPLATE: ${SENDGRID_ACCOUNT_DEACTIVATION_TEMPLATE}
       SENDGRID_WELCOME_TEMPLATE: ${SENDGRID_WELCOME_TEMPLATE}
      #database 
       DATABASE_URL: ${DATABASE_URL}
       #redis 
       REDIS_HOST: ${REDIS_HOST}
       REDIS_PORT: ${REDIS_PORT}
       #mpesa
       MPESA_ORG_SHORTCODE: ${MPESA_ORG_SHORTCODE}
       MPESA_BASE_URL: ${MPESA_BASE_URL}
       MPESA_API_KEY: ${MPESA_API_KEY}
       MPESA_PUB_KEY: ${MPESA_PUB_KEY}
       MPESA_SESSION_TTL: ${MPESA_SESSION_TTL}
    # depends_on:
    #    db:
    #     condition: service_healthy
    #    redis:
    #     condition: service_healthy
    # ports:
    #   - ${APP_PORT}:3000
    volumes:
      - ${PWD}/${GOOGLE_APPLICATION_CREDENTIALS}:/usr/src/app/${GOOGLE_APPLICATION_CREDENTIALS}
      - ./webserver/web-root:/usr/src/app/public
    networks:
      webnet:

    deploy:
      replicas: 1
      resources:
        limits:
          # cpus:  0.5
          memory: 1g
      restart_policy:
        condition: on-failure
  
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      webnet:
    deploy:
      replicas: 1
      resources:
        limits: 
          # cpus: 0.05        
          memory: 250m
      restart_policy:
        condition: on-failure

  webserver:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
      - "5555:5555"
    volumes:
      - ./webserver/web-root:/var/www/html
      - ./webserver/nginx-conf:/etc/nginx/conf.d
      - ./webserver/certbot/certbot-etc:/etc/letsencrypt
      - ./webserver/certbot/certbot-var:/var/lib/letsencrypt
      - ./dhparam:/etc/ssl/certs
    networks:
      webnet:
    deploy:
      replicas: 1
      resources:
       limits:
        #  cpus: 0.1
         memory: 500mb
      restart_policy:
        condition: on-failure
        
networks:
  webnet:   
volumes:
  PGDATA:

