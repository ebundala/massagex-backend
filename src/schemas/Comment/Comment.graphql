type Comment {
          id: String!
          author: User!
          authorId: String!
          review: Review
          reviewId: String!
          attachments(where: AttachmentWhereInput
              orderBy: [AttachmentOrderByInput!]
              cursor: AttachmentWhereUniqueInput
              take: Int
              skip: Int
              distinct: [AttachmentScalarFieldEnum!]
              ): [Attachment!]!
          comments(where: CommentWhereInput
              orderBy: [CommentOrderByInput!]
              cursor: CommentWhereUniqueInput
              take: Int
              skip: Int
              distinct: [CommentScalarFieldEnum!]
              ): [Comment!]!
          commentsEnabled: Boolean!
          content: String!
          recordStatus: RecordStatus!
          createdAt: DateTime!
          updatedAt: DateTime!
          comment: Comment
          commentId: String
          abuseReports(where: AbuseReportWhereInput
              orderBy: [AbuseReportOrderByInput!]
              cursor: AbuseReportWhereUniqueInput
              take: Int
              skip: Int
              distinct: [AbuseReportScalarFieldEnum!]
              ): [AbuseReport!]!
          favorites(where: FavoriteWhereInput
              orderBy: [FavoriteOrderByInput!]
              cursor: FavoriteWhereUniqueInput
              take: Int
              skip: Int
              distinct: [FavoriteScalarFieldEnum!]
              ): [Favorite!]!
    }

      type CommentListResponse {
        status: Boolean!
        data: [Comment!]
        message: String!
      }
     

      type CommentResponse {
        status: Boolean!
        data: Comment
        message: String!
      }
      
      type CommentBatchResponse {
        status: Boolean!
        data: BatchPayload
        message: String!
      }
      type AggregateCommentResponse {
        status: Boolean!
        data: AggregateComment
        message: String!
      }
      type CommentCountResponse {
        status: Boolean!
        data: Int
        message: String!
      }
      
    extend type Query {
    
    findManyComment(
      where: CommentWhereInput
      orderBy: [CommentOrderByInput!]
      cursor: CommentWhereUniqueInput
      distinct: [CommentScalarFieldEnum!]
      skip: Int
      take: Int
    ): CommentListResponse!
  }