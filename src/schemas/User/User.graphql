type User {
          id: String!
          email: String!
          displayName: String!
          phoneNumber: String
          emailVerified: Boolean!
          disabled: Boolean!
          avator: Attachment
          avatorId: String
          role: Role!
          state: State!
          businessProfile: BusinessProfile
          services(where: ServiceWhereInput
              orderBy: [ServiceOrderByInput!]
              cursor: ServiceWhereUniqueInput
              take: Int
              skip: Int
              distinct: [ServiceScalarFieldEnum!]
              ): [Service!]!
          createdAt: DateTime!
          updatedAt: DateTime!
          device: Device
          orders(where: OrderWhereInput
              orderBy: [OrderOrderByInput!]
              cursor: OrderWhereUniqueInput
              take: Int
              skip: Int
              distinct: [OrderScalarFieldEnum!]
              ): [Order!]!
          reviews(where: ReviewWhereInput
              orderBy: [ReviewOrderByInput!]
              cursor: ReviewWhereUniqueInput
              take: Int
              skip: Int
              distinct: [ReviewScalarFieldEnum!]
              ): [Review!]!
          reviewed(where: ReviewWhereInput
              orderBy: [ReviewOrderByInput!]
              cursor: ReviewWhereUniqueInput
              take: Int
              skip: Int
              distinct: [ReviewScalarFieldEnum!]
              ): [Review!]!
          comments(where: CommentWhereInput
              orderBy: [CommentOrderByInput!]
              cursor: CommentWhereUniqueInput
              take: Int
              skip: Int
              distinct: [CommentScalarFieldEnum!]
              ): [Comment!]!
          location: Location!
          locationId: String!
    }

      type UserListResponse {
        status: Boolean!
        data: [User!]
        message: String!
      }
     

      type UserResponse {
        status: Boolean!
        data: User
        message: String!
      }
      
      type UserBatchResponse {
        status: Boolean!
        data: BatchPayload
        message: String!
      }
      type AggregateUserResponse {
        status: Boolean!
        data: AggregateUser
        message: String!
      }
      type UserCountResponse {
        status: Boolean!
        data: Int
        message: String!
      }
      extend type Query {
    findUniqueUser(where: UserWhereUniqueInput!): UserResponse!
    findManyUser(
      where: UserWhereInput
      orderBy: [UserOrderByInput!]
      cursor: UserWhereUniqueInput
      distinct: [UserScalarFieldEnum!]
      skip: Int
      take: Int
    ): UserListResponse!
  }
extend type Mutation {
    createOneUser(data: UserCreateInput!): UserResponse!
    updateOneUser(
      where: UserWhereUniqueInput!
      data: UserUpdateInput!
    ): UserResponse!
  }